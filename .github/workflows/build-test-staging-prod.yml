name: Build-Test-Staging-Prod

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: write
  deployments: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: |
          set -euxo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install || true
          fi
      - name: Run build (or mock)
        run: |
          set -euxo pipefail
          if npm run | grep -qE "build"; then
            npm run build
          else
            mkdir -p dist
            echo "ok" > dist/app.txt
          fi
          ls -lah || true
          ls -lah dist || true
      - name: Package artifact
        run: |
          set -euxo pipefail
          if [ -d dist ] && [ "$(ls -A dist)" ]; then
            zip -r build.zip dist
          else
            zip -r build.zip .
          fi
          ls -lah build.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip
          if-no-files-found: error

  test-unit:
    name: Test Unit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .
      - name: Verify artifact exists
        run: |
          set -euxo pipefail
          test -f build.zip
          echo "artifact ok"
      - name: Mock unit tests
        run: |
          set -euxo pipefail
          unzip -l build.zip | grep "app.txt"
          echo "unit tests passed"

  test-integration-staging:
    name: Test Integration (staging)
    runs-on: ubuntu-latest
    needs: test-unit
    environment: staging
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .
      - name: Mock integration tests for staging
        env:
          TEST_ENV: ${{ vars.TEST_ENV }}
        run: |
          set -euxo pipefail
          echo "TEST_ENV=$TEST_ENV"
          [ "$TEST_ENV" = "staging" ]
          unzip -t build.zip
          echo "integration tests for staging passed"

  test-integration-prod:
    name: Test Integration (prod)
    runs-on: ubuntu-latest
    needs: test-unit
    environment: production
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .
      - name: Mock integration tests for prod
        env:
          TEST_ENV: ${{ vars.TEST_ENV }}
        run: |
          set -euxo pipefail
          echo "TEST_ENV=$TEST_ENV"
          [ "$TEST_ENV" = "prod" ]
          unzip -t build.zip
          echo "integration tests for prod passed"

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: test-integration-staging
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .
      - name: Build unique tag
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "TAG=staging-${GITHUB_RUN_NUMBER}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "NOTES=${{ vars.RELEASE_NOTE }}" >> $GITHUB_ENV
      - name: Validate artifact
        run: |
          set -euxo pipefail
          test -f build.zip
          ls -lah build.zip
      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          if gh release view "$TAG" --repo "${GITHUB_REPOSITORY}" >/dev/null 2>&1; then
            gh release delete "$TAG" --repo "${GITHUB_REPOSITORY}" -y || true
            git push --delete origin "$TAG" || true
          fi
          gh release create "$TAG" build.zip \
            --repo "${GITHUB_REPOSITORY}" \
            --prerelease \
            --title "$TAG" \
            --notes "$NOTES"

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
      - test-integration-prod
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .
      - name: Build unique tag
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "TAG=prod-${GITHUB_RUN_NUMBER}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "NOTES=${{ vars.RELEASE_NOTE }}" >> $GITHUB_ENV
      - name: Validate artifact
        run: |
          set -euxo pipefail
          test -f build.zip
          ls -lah build.zip
      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          if gh release view "$TAG" --repo "${GITHUB_REPOSITORY}" >/dev/null 2>&1; then
            gh release delete "$TAG" --repo "${GITHUB_REPOSITORY}" -y || true
            git push --delete origin "$TAG" || true
          fi
          gh release create "$TAG" build.zip \
            --repo "${GITHUB_REPOSITORY}" \
            --title "$TAG" \
            --notes "$NOTES"
