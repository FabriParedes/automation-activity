name: CI Dev Deployment

on:
  push:
    branches: ["main"]

permissions:
  contents: write

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Package
        run: |
          set -euxo pipefail
          zip -r build.zip .
          ls -lah build.zip
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip
          if-no-files-found: error

  deploy-dev:
    name: Release to Dev
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .
      - name: Pre-flight Checks
        env:
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -euxo pipefail
          echo "TAG=$TAG"
          echo "NOTE=$NOTE"
          if [ -z "${TAG:-}" ]; then echo "Missing BUILD_TAG"; exit 2; fi
          if [ -z "${NOTE:-}" ]; then echo "Missing RELEASE_NOTE"; exit 2; fi
          ls -lah
          if [ ! -f build.zip ]; then echo "build.zip not found"; exit 3; fi
          gh --version || true
      - name: Auth Check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          gh auth status || gh auth login --with-token <<< "${GITHUB_TOKEN}"
      - name: Create or Update Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -euxo pipefail
          if gh release view "$TAG" >/dev/null 2>&1; then
            gh release edit "$TAG" --notes "$NOTE"
            gh release upload "$TAG" build.zip --clobber
          else
            gh release create "$TAG" build.zip --notes "$NOTE" --prerelease
          fi

